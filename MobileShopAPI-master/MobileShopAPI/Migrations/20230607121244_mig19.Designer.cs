// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MobileShopAPI.Data;

#nullable disable

namespace MobileShopAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230607121244_mig19")]
    partial class mig19
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MobileShopAPI.Models.ActiveSubscription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("ActivatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("activatedDate")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime")
                        .HasColumnName("expiredDate");

                    b.Property<long>("SpId")
                        .HasColumnType("bigint")
                        .HasColumnName("sp_id");

                    b.Property<int?>("UsedPost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("usedPost")
                        .HasDefaultValueSql("((0))")
                        .HasComment("Số lượng bài đăng đã sử dụng");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("SpId");

                    b.HasIndex("UserId");

                    b.ToTable("active_subscription", (string)null);
                });

            modelBuilder.Entity("MobileShopAPI.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updateddDate");

                    b.Property<long?>("UserBalance")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MobileShopAPI.Models.Brand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_url")
                        .HasComment("url hình ảnh");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("brand", (string)null);
                });

            modelBuilder.Entity("MobileShopAPI.Models.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_url")
                        .HasComment("url hình ảnh");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("MobileShopAPI.Models.CoinAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("action_name");

                    b.Property<int?>("CaCoinAmount")
                        .HasColumnType("int")
                        .HasColumnName("ca_coin_amount");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("updatedDate");

                    b.HasKey("Id");

                    b.ToTable("coin_action", (string)null);

                    b.HasComment("Actions on website using coin");
                });

            modelBuilder.Entity("MobileShopAPI.Models.CoinPackage", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("id");

                    b.Property<long?>("CoinAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("coin_amount");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("package_name");

                    b.Property<long>("PackageValue")
                        .HasColumnType("bigint")
                        .HasColumnName("package_value");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedDate");

                    b.Property<string>("ValueUnit")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("value_unit")
                        .HasDefaultValueSql("('VND')")
                        .HasComment("vnđ,...v.v");

                    b.HasKey("Id");

                    b.ToTable("coin_package", (string)null);
                });

            modelBuilder.Entity("MobileShopAPI.Models.Color", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("colorName");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("HexValue")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("color", (string)null);
                });

            modelBuilder.Entity("MobileShopAPI.Models.Evidence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_url");

                    b.Property<long>("ReportId")
                        .HasColumnType("bigint")
                        .HasColumnName("reportId");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("evidence", (string)null);
                });

            modelBuilder.Entity("MobileShopAPI.Models.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<bool>("IsCover")
                        .HasColumnType("bit")
                        .HasColumnName("isCover")
                        .HasComment("hình ảnh là ảnh bìa");

                    b.Property<long>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("(CONVERT([bigint],(0)))");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("url")
                        .HasComment("url hình ảnh");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductId" }, "IX_image_ProductId");

                    b.ToTable("image", (string)null);
                });

            modelBuilder.Entity("MobileShopAPI.Models.InternalTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<long?>("CoinActionId")
                        .HasColumnType("bigint")
                        .HasColumnName("coinActionId");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int?>("ItAmount")
                        .HasColumnType("int")
                        .HasColumnName("it_amount");

                    b.Property<string>("ItInfo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("it_info");

                    b.Property<DateTime?>("ItSecureHash")
                        .HasColumnType("datetime")
                        .HasColumnName("it_secureHash");

                    b.Property<long?>("SpId")
                        .HasColumnType("bigint")
                        .HasColumnName("spId");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("CoinActionId");

                    b.HasIndex("SpId");

                    b.HasIndex("UserId");

                    b.ToTable("internal_transaction", (string)null);
                });

            modelBuilder.Entity("MobileShopAPI.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phoneNumber");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Total")
                        .HasColumnType("bigint")
                        .HasColumnName("total");

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type")
                        .HasComment("1 = trả hết, 2 = đặt cọc");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updateDate");

                    b.Property<string>("UserFullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("userFullName");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_order_userId");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("MobileShopAPI.Models.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BrandId")
                        .HasColumnType("bigint")
                        .HasColumnName("brandId");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("categoryId");

                    b.Property<long>("ColorId")
                        .HasColumnType("bigint")
                        .HasColumnName("colorId")
                        .HasComment("part of primaryKey");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<int?>("Priorities")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("priorities")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("SizeId")
                        .HasColumnType("bigint")
                        .HasColumnName("sizeId")
                        .HasComment("part of primaryKey");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status")
                        .HasDefaultValueSql("((2))");

                    b.Property<int>("Stock")
                        .HasColumnType("int")
                        .HasColumnName("stock");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updateDate");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedDate");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.Property<bool>("isHidden")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BrandId" }, "IX_product_brandId");

                    b.HasIndex(new[] { "CategoryId" }, "IX_product_categoryId");

                    b.HasIndex(new[] { "ColorId" }, "IX_product_colorId");

                    b.HasIndex(new[] { "SizeId" }, "IX_product_sizeId");

                    b.HasIndex(new[] { "UserId" }, "IX_product_userId");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("MobileShopAPI.Models.ProductOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("orderId");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("productId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("product_order", (string)null);
                });

            modelBuilder.Entity("MobileShopAPI.Models.Report", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("body");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<long>("ReportCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("reportCategoryId");

                    b.Property<long?>("ReportedProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("reportedProductId");

                    b.Property<string>("ReportedUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("reportedUserId");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("subject");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId")
                        .HasComment("user id of user who sent the report");

                    b.HasKey("Id");

                    b.HasIndex("ReportCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("report", (string)null);
                });

            modelBuilder.Entity("MobileShopAPI.Models.ReportCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedDate");

                    b.HasKey("Id");

                    b.ToTable("report_category", (string)null);
                });

            modelBuilder.Entity("MobileShopAPI.Models.ShippingAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AddressDetail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("address_detail")
                        .HasComment("house number, district name");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address_name");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<bool?>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDefault")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedDate");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.Property<int>("WardId")
                        .HasColumnType("int")
                        .HasColumnName("wardId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("shipping_address", (string)null);
                });

            modelBuilder.Entity("MobileShopAPI.Models.Size", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SizeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("sizeName");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("size", (string)null);
                });

            modelBuilder.Entity("MobileShopAPI.Models.SubscriptionPackage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int>("ExpiredIn")
                        .HasColumnType("int")
                        .HasColumnName("expiredIn")
                        .HasComment("Số ngày sử dụng");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<int>("PostAmout")
                        .HasColumnType("int")
                        .HasColumnName("postAmout")
                        .HasComment("Số lượng được tin đăng khi mua gói");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("updatedDate");

                    b.HasKey("Id");

                    b.ToTable("subscription_package", (string)null);
                });

            modelBuilder.Entity("MobileShopAPI.Models.UserRating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("productId");

                    b.Property<short>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("rating")
                        .HasDefaultValueSql("((1))")
                        .HasComment("1,2,3,4,5");

                    b.Property<string>("UsderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("usderId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductId" }, "IX_user_rating_productId");

                    b.HasIndex(new[] { "UsderId" }, "IX_user_rating_usderId");

                    b.ToTable("user_rating", (string)null);
                });

            modelBuilder.Entity("MobileShopAPI.Models.VnpTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("id");

                    b.Property<string>("OrderId")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("orderId");

                    b.Property<string>("PackageId")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("packageId");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.Property<long?>("VnpAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("vnp_Amount");

                    b.Property<string>("VnpBankCode")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("vnp_BankCode");

                    b.Property<string>("VnpCommand")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("vnp_Command");

                    b.Property<long?>("VnpCreateDate")
                        .HasColumnType("bigint")
                        .HasColumnName("vnp_CreateDate");

                    b.Property<string>("VnpCurrCode")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("vnp_CurrCode");

                    b.Property<string>("VnpIpAddr")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("vnp_IpAddr");

                    b.Property<string>("VnpLocale")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("vnp_Locale");

                    b.Property<string>("VnpOrderInfo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("vnp_OrderInfo");

                    b.Property<string>("VnpOrderType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("vnp_OrderType");

                    b.Property<string>("VnpSecureHash")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("vnp_SecureHash");

                    b.Property<string>("VnpTmnCode")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("vnp_TmnCode");

                    b.Property<string>("VnpTxnRef")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("vnp_TxnRef");

                    b.Property<string>("VnpVersion")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("vnp_Version");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex(new[] { "OrderId" }, "IX_transaction_orderId");

                    b.HasIndex(new[] { "UserId" }, "IX_transaction_userId");

                    b.ToTable("vnp_transaction", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MobileShopAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MobileShopAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MobileShopAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MobileShopAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MobileShopAPI.Models.ActiveSubscription", b =>
                {
                    b.HasOne("MobileShopAPI.Models.SubscriptionPackage", "Sp")
                        .WithMany("ActiveSubscriptions")
                        .HasForeignKey("SpId")
                        .IsRequired()
                        .HasConstraintName("fk_active_subcription_subscription_package");

                    b.HasOne("MobileShopAPI.Models.ApplicationUser", "User")
                        .WithMany("ActiveSubscriptions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_active_subcription_AspNetUsers");

                    b.Navigation("Sp");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MobileShopAPI.Models.Evidence", b =>
                {
                    b.HasOne("MobileShopAPI.Models.Report", "Report")
                        .WithMany("Evidences")
                        .HasForeignKey("ReportId")
                        .IsRequired()
                        .HasConstraintName("fk_evidence_Report");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("MobileShopAPI.Models.Image", b =>
                {
                    b.HasOne("MobileShopAPI.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_images_product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MobileShopAPI.Models.InternalTransaction", b =>
                {
                    b.HasOne("MobileShopAPI.Models.CoinAction", "CoinAction")
                        .WithMany("InternalTransactions")
                        .HasForeignKey("CoinActionId")
                        .HasConstraintName("fk_internal_transaction_coin_action");

                    b.HasOne("MobileShopAPI.Models.SubscriptionPackage", "Sp")
                        .WithMany("InternalTransactions")
                        .HasForeignKey("SpId")
                        .HasConstraintName("fk_internal_transaction_subscription_package");

                    b.HasOne("MobileShopAPI.Models.ApplicationUser", "User")
                        .WithMany("InternalTransactions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_internal_transaction_AspNetUsers");

                    b.Navigation("CoinAction");

                    b.Navigation("Sp");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MobileShopAPI.Models.Order", b =>
                {
                    b.HasOne("MobileShopAPI.Models.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_order_AspNetUsers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MobileShopAPI.Models.Product", b =>
                {
                    b.HasOne("MobileShopAPI.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("fk_product_brand");

                    b.HasOne("MobileShopAPI.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("fk_product_catagory");

                    b.HasOne("MobileShopAPI.Models.Color", "Color")
                        .WithMany("Products")
                        .HasForeignKey("ColorId")
                        .IsRequired()
                        .HasConstraintName("fk_product_color");

                    b.HasOne("MobileShopAPI.Models.Size", "Size")
                        .WithMany("Products")
                        .HasForeignKey("SizeId")
                        .IsRequired()
                        .HasConstraintName("fk_product_size");

                    b.HasOne("MobileShopAPI.Models.ApplicationUser", "User")
                        .WithMany("Products")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_product_AspNetUsers");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Color");

                    b.Navigation("Size");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MobileShopAPI.Models.ProductOrder", b =>
                {
                    b.HasOne("MobileShopAPI.Models.Order", "Order")
                        .WithMany("ProductOrders")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("fk_product_order_order");

                    b.HasOne("MobileShopAPI.Models.Product", "Product")
                        .WithMany("ProductOrders")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("fk_product_order_product");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MobileShopAPI.Models.Report", b =>
                {
                    b.HasOne("MobileShopAPI.Models.ReportCategory", "ReportCategory")
                        .WithMany("Reports")
                        .HasForeignKey("ReportCategoryId")
                        .IsRequired()
                        .HasConstraintName("fk_Report_report_category");

                    b.HasOne("MobileShopAPI.Models.ApplicationUser", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_Report_AspNetUsers");

                    b.Navigation("ReportCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MobileShopAPI.Models.ShippingAddress", b =>
                {
                    b.HasOne("MobileShopAPI.Models.ApplicationUser", "User")
                        .WithMany("ShippingAddresses")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_shipping_address_AspNetUsers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MobileShopAPI.Models.UserRating", b =>
                {
                    b.HasOne("MobileShopAPI.Models.Product", "Product")
                        .WithMany("UserRatings")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("fk_user_rating_product");

                    b.HasOne("MobileShopAPI.Models.ApplicationUser", "Usder")
                        .WithMany("UserRatings")
                        .HasForeignKey("UsderId")
                        .IsRequired()
                        .HasConstraintName("fk_user_rating_AspNetUsers");

                    b.Navigation("Product");

                    b.Navigation("Usder");
                });

            modelBuilder.Entity("MobileShopAPI.Models.VnpTransaction", b =>
                {
                    b.HasOne("MobileShopAPI.Models.Order", "Order")
                        .WithMany("Transactions")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("fk_transaction_order");

                    b.HasOne("MobileShopAPI.Models.CoinPackage", "Package")
                        .WithMany("Transactions")
                        .HasForeignKey("PackageId")
                        .HasConstraintName("fk_vnp_transaction_coin_package");

                    b.HasOne("MobileShopAPI.Models.ApplicationUser", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_transaction_AspNetUsers");

                    b.Navigation("Order");

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MobileShopAPI.Models.ApplicationUser", b =>
                {
                    b.Navigation("ActiveSubscriptions");

                    b.Navigation("InternalTransactions");

                    b.Navigation("Orders");

                    b.Navigation("Products");

                    b.Navigation("Reports");

                    b.Navigation("ShippingAddresses");

                    b.Navigation("Transactions");

                    b.Navigation("UserRatings");
                });

            modelBuilder.Entity("MobileShopAPI.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MobileShopAPI.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MobileShopAPI.Models.CoinAction", b =>
                {
                    b.Navigation("InternalTransactions");
                });

            modelBuilder.Entity("MobileShopAPI.Models.CoinPackage", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MobileShopAPI.Models.Color", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MobileShopAPI.Models.Order", b =>
                {
                    b.Navigation("ProductOrders");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MobileShopAPI.Models.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("ProductOrders");

                    b.Navigation("UserRatings");
                });

            modelBuilder.Entity("MobileShopAPI.Models.Report", b =>
                {
                    b.Navigation("Evidences");
                });

            modelBuilder.Entity("MobileShopAPI.Models.ReportCategory", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("MobileShopAPI.Models.Size", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MobileShopAPI.Models.SubscriptionPackage", b =>
                {
                    b.Navigation("ActiveSubscriptions");

                    b.Navigation("InternalTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
